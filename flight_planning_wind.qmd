---
title: "Flight Planning: Wind"
author: "Brian Maitner"
date: "11/8/2022"
output:
  html_document:
    code_folding: hide
---
  
# Wind Data (ERA5)
Wind speed data were taken from ERA5. Data are hourly and have a 0.25 degree resolution.

```{r setup era5}  
#| echo: true
#| message: false
#| warning: false
#| fig.width: 10
#| fig.height: 10
#| include: true
#| code-fold: true
#| code-summary: "Show the code"

# Load packages
  library(rgee)
  library(targets)
  library(sf)
  library(terra)
  library(raster)
  library(tidyverse)
  library(lubridate)
  library(leaflet)
  library(ggplot2)
  library(ggpubr)
  library(leafem)
  library(plotly)

#Load required data

  # get domain
    domain <- st_read("data/output/domain.gpkg",
                      quiet = TRUE)
    domain_sf <- domain
  
  # get flight boxes
    boxes <- st_read("data/flight_planning/20221026_flightboxes.gpkg",
                     quiet = TRUE)
    
    boxes$id <- 1:20 # need a unique ID to make things easier
    
    boxes$ordered_id[c(11,10,15,14,20,18,2,13,17,16,4,1,6,8,3,19,5,9,7,12)] <- 1:20
    
    boxes_sf <- boxes

  
  # Pull in other bioscape layers
  
    team_requests <- st_read("data/manual_downloads/BIOSCAPE_proposed/20221014_team_polygons.gpkg",quiet = TRUE) %>%
        st_transform(crs = st_crs(4326))
  
    domain_sf %>%
        st_transform(crs = st_crs(4326)) -> domain_wgs84
    
    #Load era5 data
    
    era5_wind_table <- readRDS("data/output/era_wind_weighted.RDS")

```

### Median Wind Speed

To visualize spatial patterns in wind speed, we calculated the average wind speed (m/s) for each raster cell (Figure 2).  Averages were taken across days (October-December) and years (2000-present).

```{r leaflet plot of clusters era5}
#| echo: true
#| message: false
#| warning: false
#| fig-cap: "Figure 2. Median wind speed (m/s). Pinker raster cells are windier, whiter cells are calmer. Boxes shown are flight boxes, labeled with a unique ID.  Polygons are the requested sampling regions. "
#| fig.width: 10
#| fig.height: 10
#| strip.white: TRUE
#| code-fold: true

  
  #mean_era5_wind_speed <- raster("data/output/mean_era5_speed.tif")
  median_era5_wind_speed <- raster("data/output/median_era5_speed.tif")
  

#Make a palette
  pal_era5 <- colorNumeric(palette = colorRamp(c("white", "magenta"), interpolate = "spline"),
                      domain = unique(values(median_era5_wind_speed)),na.color = NA)
  

boxes_sf %>%
  st_transform(crs = st_crs(4326))%>%
leaflet() %>%
  addProviderTiles("Esri.NatGeoWorldMap", group = "NatGeo") %>%
  addProviderTiles(providers$Esri.WorldImagery, group = "World Imagery") %>%
  addMapPane("flights", zIndex = 420) %>%
  addMapPane("requests", zIndex = 410) %>% 
  addRasterImage(x = median_era5_wind_speed,
                 group = "Wind",
                 colors = pal_era5,
                 opacity = 1) %>%
     addPolygons(stroke = TRUE,
              group = "Flights",
              color = "black",
              opacity = 1,
              weight = 1,
              label = ~as.character(ordered_id),
              labelOptions = labelOptions(noHide = T,
                                          textOnly = T,
                                          textsize = 3),
              options = pathOptions(pane = "flights"),
              fill = FALSE)%>%
      addPolygons(data = team_requests %>%
                st_zm(drop = T, what = "ZM"),
                  stroke = TRUE,
                  color = "black",
                  group = "Requests",
              options = pathOptions(pane = "requests"),
              fill = FALSE,
              weight = 1)%>%
    addMouseCoordinates() %>%
    #addImageQuery(sampling_options_wgs84, type="mousemove", layerId = "park_name") %>%
  leaflet::addLegend(position = "bottomright",
            pal = pal_era5,
            values = min(na.omit(values(median_era5_wind_speed))):max(na.omit(values(median_era5_wind_speed))),
            opacity = 1,
            title = "Median\nWind\nSpeed\n(m/s)") %>%
    addLayersControl(
    baseGroups = c("World Imagery","NatGeo"),
    overlayGroups = c("Flights","Requests","Wind"),
    options = layersControlOptions(collapsed = FALSE),
    position = "topright") %>%
  hideGroup("Requests")



```


### Wind speed over time

To visualize temporal patterns in wind speed, we calculated the mean wind speed for each flight box (Figure 3).

```{r wind over time era5}
#| echo: true
#| message: false
#| warning: false
#| fig.width: 10
#| fig.height: 10
#| fig.cap: "Figure 3. Rows represent different flight boxes (see Fig 2.), columns different days."
#| code-fold: true
#|
  #ID by day of year
  
    era5_wind_table %>%
        mutate(date = as.Date(doy,origin="2022-12-31")) %>%
        mutate(start_of_month = floor_date(date,unit = "month"),
               month_label = month(start_of_month,label = TRUE),
               julian_label = yday(start_of_month),
               day_of_month = mday(date),
               md_label = paste(month_label,"-",day_of_month,sep = "")) %>%
      group_by(ID,doy,month_label,julian_label,year) %>%
      summarise(mean = mean(wgt_mean_wind_speed))%>%
      left_join(y = boxes_sf %>%
      st_drop_geometry(),by = c("ID"="id")) -> temp
      


    { temp %>%
      ggplot() +
      geom_tile(mapping = aes(x = doy,
                              y = ordered_id,
                              fill = mean))+
      scale_fill_gradient(low = "white",
                          high = "magenta")+
      facet_wrap(~year)+
        scale_x_continuous(breaks = temp$julian_label,
                           labels = temp$month_label)+
      labs(fill="Mean\nWind\nSpeed\n(m/s)",
           y="Flight Box ID",
           x = "Day of Year")+
        theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))} %>%
  ggplotly()


```
### Mean Monthly Wind Speed

We also did spatiotemporal aggregations of mean wind speed by month and flight box (Figure 4). In other words, we aggregated both spatially (all cells within the domain) and temporally (all days within the given month across all years).

```{r monthly wind speed era5}
#| echo: true
#| message: false
#| warning: false
#| fig.width: 10
#| fig.height: 20
#| fig.cap: "Figure 4. The full domain (light grey) and planned flight boxes, colored by mean monthly wind speed. Numbers on flight boxes refer to mean wind speed."
#| code-fold: true

# mean monthly wind speed
    {era5_wind_table %>%
      group_by(ID, month)%>%
      filter(month != 9)%>%
      summarize(mean_cc = mean(na.omit(wgt_mean_wind_speed)))%>%
      inner_join(x = boxes_sf,
                 by = c("id"="ID"))%>%
      ggplot(mapping = aes(fill = mean_cc))+
      geom_sf()+
      geom_sf(data = domain_sf,
              inherit.aes = FALSE,fill=NA)+
      scale_fill_gradient(low = "white",high = "magenta")+
      facet_wrap(~month,ncol = 1)+
      geom_sf_text(aes(label = round(mean_cc,digits = 2)))+
      labs(fill="Mean\nWind\nSpeed\n(m/s)")+
      xlab(NULL)+
      ylab(NULL)} %>%
  ggplotly()


```

### Diurnal patterns in wind speed

```{r diurnal patterns}
#| echo: true
#| message: false
#| warning: false
#| fig.width: 10
#| fig.height: 20
#| fig.cap: "Figure 5. Diurnal patterns in wind speed. Dots represent the 90th percentile wind speed in a flight box at a particular hour. Numbers above the plots refer to flight boxes. Lines shone are a loess fit."
#| code-fold: true

era5_wind_table %>%
  inner_join(x = boxes_sf,
                 by = c("id"="ID"))%>%
  group_by(ordered_id, hour)%>%
  ggplot()+
  geom_point(mapping = aes(x=hour,y = wgt_90pct_wind_speed,color=target),alpha=0.5)+
  geom_smooth(mapping = aes(x=hour,y=wgt_90pct_wind_speed),method = "loess")+
  facet_wrap(~ordered_id)+
  ylab("90th Percentile Wind Speed")+
  geom_hline(yintercept = 5, lty = 2)+
  scale_color_manual(values = c("Aquatic" = "blue",
                                "Terrestrial"="brown",
                                "Terrestrial (coincident aquatic)"="tan")) 
```


# Campaign Simulations

In order to estimate how successful our campaign might be, we conducted a simulation using the MODIS aqua and terra cloud data.

1) Calculate mean cloud cover and median wind speed for each flight box for each day in the temporal window of interest (October-December, 2000 to present).

2) Rank flight boxes in descending order of priority. The aquatic sites receive the highest priority and are further ranked in descending order of median wind speed. The terrestrial sites are ranked in descending order of mean cloud cover. Thus, the highest priority is the windiest aquatic site and the lowest priority is the terrestrial site with the least cloud cover.

3) For each day in time time series:
  a) If there are at least 60 days in which to sampling, continue. Else, skip.
  b) Sample the highest ranking (i.e. hardest to sample) site (if any) that is below 5% cloud cover, has a median wind speed of less than 5 m/s(if it is an aquatic site), and hasn't been sampled. 
  c) Repeat b until all sites have been sampled or no more time remains



```{r campaing time estimate}
#| echo: true
#| message: false
#| warning: false
#| fig.width: 14
#| fig.height: 10
#| strip.white: TRUE
#| fig.cap: "Figure 6. Estimated length of time needed to finish campaign. The dark grey area represents the 50% CI, the light gray the  90% CI, and the solid line represents the median."
     
  #code underlying simulations available in the file "R/flight_window.R"

   #readRDS("data/temp/sim_output_01_cloud_5ms_wind.RDS")%>%
     readRDS("data/temp/sim_output_05_cloud_5ms_wind.RDS")%>%
   #readRDS("data/temp/sim_output_10_cloud_5ms_wind.RDS")%>%
        na.omit()%>%
        group_by(start_date)%>%
        summarise(sites_done = sum(!is.na(box_id)),
                  mean_cc = mean(na.omit(mean_cloud_cover)),
                  days_taken = max(date)-min(start_date)+1)%>%
        ungroup()%>%
        mutate(day_of_year = yday(as_date(start_date)),
               year = year(as_date(start_date)))%>%
        group_by(day_of_year)%>%
        summarise(q0 = quantile(days_taken,probs=0),
                  q25 = quantile(days_taken,probs=0.05),
                  q50 = quantile(days_taken,probs=0.5),
                  q75 = quantile(days_taken,probs=0.95),
                  q1 = quantile(days_taken,probs=1)
        ) %>%
        mutate(date = as.Date(day_of_year,origin="2022-12-31"))%>%
        mutate(start_of_month = floor_date(date,unit = "month"),
               month_label = month(start_of_month,label = TRUE),
               julian_label = yday(start_of_month),
               day_of_month = mday(date),
               md_label = paste(month_label,"-",day_of_month,sep = ""))->test
      
      {test %>%    
        ggplot()+
        geom_ribbon(aes(ymin=q0,ymax=q1, x = day_of_year),col="grey",alpha=0.2)+
        geom_ribbon(aes(ymin=q25,ymax=q75, x = day_of_year),col="grey",alpha=0.5)+
        geom_line(aes(x=day_of_year,y=q50))+
        geom_hline(yintercept = 37,lty=2)+
        scale_x_continuous(breaks = test$day_of_year,
                           labels = test$md_label)+ #note: it seems like it should be possible to inherit these
        ylab("Flight Days Needed")+
        xlab("Campaign Starting Day")+
        geom_text(label = "estimated total number of flight days",
                  y=37.3,
                  x=280)+
        theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) } %>%
  ggplotly()
      

      


```



############################################################################################################

# Wind Data (FEWS Net)

Wind speed data were taken from the Famine Early Warning Systems Network (FEWS NET) Land Data Assimilation System (https://developers.google.com/earth-engine/datasets/catalog/NASA_FLDAS_NOAH01_C_GL_M_V001#bands ). These are monthly data with a resolution of ~ 11 km.

  
```{r setup}
#| echo: true
#| message: false
#| warning: false
#| fig.width: 10
#| fig.height: 10
#| include: true
#| code-fold: true
#| code-summary: "Show the code"


    
  # Download table from drive (to see the code underlying this or to update the data, see the file "R/mock_flights_earth_engine.R")
    googledrive::drive_download(file = "EMMA/wind_stats.csv",
                                path = "data/wind_stats.csv",
                                overwrite = TRUE)
    
    wind_table <- read.csv("data/wind_stats.csv")

  # Parse date

    wind_table %>%
      mutate(year = year(date),
             month = month(date),
             day = day(date),
             day_of_year = yday(date)) -> wind_table
  
    

```

### Mean Wind Speed

To visualize spatial patterns in wind speed, we calculated the average wind speed (m/s) for each raster cell (Figure 2).  Averages were taken across days (October-December) and years (2000-present).

```{r leaflet plot of clusters}
#| echo: true
#| message: false
#| warning: false
#| fig-cap: "Figure 2. Mean wind speed (m/s). Pinker raster cells are windier, whiter cells are calmer. Boxes shown are flight boxes, labeled with a unique ID.  Polygons are the requested sampling regions. "
#| fig.width: 10
#| fig.height: 10
#| strip.white: TRUE
#| code-fold: true

  
  mean_wind_speed <- raster("data/output/mean_wind.tif")
  

#Make a palette
  pal <- colorNumeric(palette = colorRamp(c("white", "magenta"), interpolate = "spline"),
                      domain = unique(values(mean_wind_speed)),na.color = NA)
  

boxes_sf %>%
  st_transform(crs = st_crs(4326))%>%
leaflet() %>%
  addProviderTiles("Esri.NatGeoWorldMap", group = "NatGeo") %>%
  addProviderTiles(providers$Esri.WorldImagery, group = "World Imagery") %>%
  addMapPane("flights", zIndex = 420) %>%
  addMapPane("requests", zIndex = 410) %>% 
  addRasterImage(x = mean_wind_speed,
                 group = "Wind",
                 colors = pal,
                 opacity = 1) %>%
     addPolygons(stroke = TRUE,
              group = "Flights",
              color = "black",
              opacity = 1,
              weight = 1,
              label = ~as.character(ordered_id),
              labelOptions = labelOptions(noHide = T,
                                          textOnly = T,
                                          textsize = 3),
              options = pathOptions(pane = "flights"),
              fill = FALSE)%>%
      addPolygons(data = team_requests %>%
                st_zm(drop = T, what = "ZM"),
                  stroke = TRUE,
                  color = "black",
                  group = "Requests",
              options = pathOptions(pane = "requests"),
              fill = FALSE,
              weight = 1)%>%
    addMouseCoordinates() %>%
    #addImageQuery(sampling_options_wgs84, type="mousemove", layerId = "park_name") %>%
  leaflet::addLegend(position = "bottomright",
            pal = pal,
            values = min(na.omit(values(mean_wind_speed))):max(na.omit(values(mean_wind_speed))),
            opacity = 1,
            title = "Mean\nWind\nSpeed\n(m/s)") %>%
    addLayersControl(
    baseGroups = c("World Imagery","NatGeo"),
    overlayGroups = c("Flights","Requests","Wind"),
    options = layersControlOptions(collapsed = FALSE),
    position = "topright") %>%
  hideGroup("Requests")



```



### Wind speed over time

To visualize temporal patterns in wind speed, we calculated the mean wind speed for each flight box (Figure 3).

```{r wind over time}
#| echo: true
#| message: false
#| warning: false
#| fig.width: 10
#| fig.height: 10
#| fig.cap: "Figure 3. Rows represent different flight boxes (see Fig 2.), columns different days."
#| code-fold: true
#|
  #ID by day of year
  
    wind_table %>%
        mutate(date = as.Date(day_of_year,origin="2022-12-31"))%>%
        mutate(start_of_month = floor_date(date,unit = "month"),
               month_label = month(start_of_month,label = TRUE),
               julian_label = yday(start_of_month),
               day_of_month = mday(date),
               md_label = paste(month_label,"-",day_of_month,sep = "")) %>%
      group_by(id,day_of_year) %>%
      left_join(y = boxes_sf %>%
      st_drop_geometry()) -> temp
      


    { temp %>%
      ggplot() +
      geom_tile(mapping = aes(x = day_of_year,
                              y = ordered_id,
                              fill = mean))+
      scale_fill_gradient(low = "white",
                          high = "magenta")+
      facet_wrap(~year)+
        scale_x_continuous(breaks = temp$julian_label,
                           labels = temp$month_label)+
      labs(fill="Mean\nWind\nSpeed\n(m/s)",
           y="Flight Box ID",
           x = "Day of Year")+
        theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))} %>%
  ggplotly()


```


### Mean Monthly Wind Speed

We also did spatiotemporal aggregations of mean wind speed by month and flight box (Figure 4). In other words, we aggregated both spatially (all cells within the domain) and temporally (all days within the given month across all years).

```{r monthly wind speed}
#| echo: true
#| message: false
#| warning: false
#| fig.width: 10
#| fig.height: 20
#| fig.cap: "Figure 4. The full domain (light grey) and planned flight boxes, colored by mean monthly wind speed. Numbers on flight boxes refer to mean wind speed."
#| code-fold: true

# mean monthly wind speed
    {wind_table %>%
      group_by(id, month)%>%
      filter(month != 9)%>%
      summarize(mean_cc = mean(na.omit(mean)))%>%
      inner_join(x = boxes_sf)%>%
      ggplot(mapping = aes(fill = mean_cc))+
      geom_sf()+
      geom_sf(data = domain_sf,
              inherit.aes = FALSE,fill=NA)+
      scale_fill_gradient(low = "white",high = "magenta")+
      facet_wrap(~month,ncol = 1)+
      geom_sf_text(aes(label = round(mean_cc,digits = 2)))+
      labs(fill="Mean\nWind\nSpeed\n(m/s)")+
      xlab(NULL)+
      ylab(NULL)} %>%
  ggplotly()


```

